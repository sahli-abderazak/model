import os
import json
import re
from typing import Any, Dict

from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException, Body
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import openai
from openai import OpenAI

# Charger les variables d'environnement
load_dotenv()

api_key = os.getenv("API_KEY")
replicate_token = os.getenv("REPLICATE_API_TOKEN")
openai.api_key = os.getenv("OPENAI_API_KEY")

if replicate_token:
    os.environ["REPLICATE_API_TOKEN"] = replicate_token
else:
    print("‚ö†Ô∏è  REPLICATE_API_TOKEN n'est pas d√©fini dans le fichier .env")

client = OpenAI(
    base_url="https://models.inference.ai.azure.com",
    api_key=api_key,
)

# Initialisation de FastAPI
app = FastAPI()

# Middleware CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mod√®les d'entr√©e
class OffreInput(BaseModel):
    poste: str
    description: str
    typeTravail: str
    niveauExperience: str
    responsabilite: str
    experience: str

class PoidsTraitsInput(BaseModel):
    ouverture: int
    conscience: int
    extraversion: int
    agreabilite: int
    stabilite: int

@app.post("/generate-test", response_model=Dict[str, Any])
async def generate_test(
    offre: OffreInput = Body(...),
    poids: PoidsTraitsInput = Body(...)
) -> Dict[str, Any]:

    poids_traits = {
        "ouverture": poids.ouverture,
        "conscience": poids.conscience,
        "extraversion": poids.extraversion,
        "agreabilite": poids.agreabilite,
        "stabilite": poids.stabilite
    }

    prompt = fr"""
    Tu es un psychologue expert en recrutement et un r√©dacteur de tests professionnels. Cr√©e un test de personnalit√© bas√© sur le mod√®le des Big Five (ouverture, conscience, extraversion, agr√©abilit√©, stabilit√© √©motionnelle), con√ßu pour √©valuer la compatibilit√© d‚Äôun candidat avec l‚Äôoffre suivante :

    ### Informations sur l‚Äôoffre :
    - Poste : {offre.poste}
    - Description : {offre.description}
    - Type de travail : {offre.typeTravail}
    - Niveau d‚Äôexp√©rience requis : {offre.niveauExperience}
    - Responsabilit√©s principales : {offre.responsabilite}
    - Exp√©rience professionnelle attendue : {offre.experience}

    ### Instructions sp√©cifiques :
    - Le test contiendra **au maximum 15 questions**, r√©parties comme suit :
      - {poids.ouverture} questions sur l‚Äôouverture
      - {poids.conscience} sur la conscience
      - {poids.extraversion} sur l‚Äôextraversion
      - {poids.agreabilite} sur l‚Äôagr√©abilit√©
      - {poids.stabilite} sur la stabilit√© √©motionnelle

    - Chaque question doit :
      - √ätre **contextualis√©e dans des situations de travail r√©elles ou techniques** li√©es √† l‚Äôoffre.
      - Avoir une **formulation unique**, avec un **contexte professionnel distinct pour chaque question**.
      - Employer un **langage technique ou professionnel adapt√© au domaine du poste**.
      - √ätre r√©dig√©e sous forme de **QCM √† 4 r√©ponses** (avec scores de 1 √† 5).

    - Ne r√©p√®te pas les contextes d‚Äôune question √† l‚Äôautre.
    - Ne sors pas du format JSON suivant, sans balises ni explications :

    [
        {{
            "trait": "conscience", 
            "question": "Lorsque je travaille sur plusieurs projets √† √©ch√©ance courte, je suis capable de hi√©rarchiser mes t√¢ches efficacement.", 
            "options": [
                {{"text": "Pas du tout d‚Äôaccord", "score": 1}},
                {{"text": "Plut√¥t pas d‚Äôaccord", "score": 2}},
                {{"text": "Plut√¥t d‚Äôaccord", "score": 4}},
                {{"text": "Tout √† fait d‚Äôaccord", "score": 5}}
            ]
        }},
        ...
    ]
    """

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt.strip()}],
            max_tokens=3000,
            temperature=0.7
        )
    except Exception as e:
        print(" Erreur OpenAI:", e)
        raise HTTPException(status_code=500, detail=f"Erreur lors de l'appel √† OpenAI: {str(e)}")

    content = response.choices[0].message.content
    print("üü° R√©ponse brute GPT :", content[:500])  # Affiche les 500 premiers caract√®res

    # Nettoyage du contenu JSON
    cleaned_content = re.sub(r"^```json\s*|```$", "", content.strip(), flags=re.MULTILINE)

    try:
        questions = json.loads(cleaned_content)
    except json.JSONDecodeError as json_error:
        print("Erreur JSON:", json_error)
        print("Contenu re√ßu:", cleaned_content)
        return JSONResponse(
            status_code=502,
            content={
                "error": "La r√©ponse de l'IA n'est pas un JSON valide.",
                "raw": cleaned_content,
                "json_error": str(json_error),
            }
        )

    # V√©rification du format
    if not isinstance(questions, list) or not all(
        isinstance(q, dict) and 'trait' in q and 'question' in q and 'options' in q for q in questions
    ):
        print(" Format JSON incorrect:", questions)
        return JSONResponse(
            status_code=400,
            content={"error": "Le format des questions n'est pas correct.", "raw": cleaned_content}
        )

    return {
        "questions": questions,
    }




class Offre(BaseModel):
    poste: str
    description: str
    niveauExperience: str
    niveauEtude: str
    responsabilite: str
    experience: str
    pays: str
    ville: str

class MatchingScoreRequest(BaseModel):
    cv: str
    offre: Offre

@app.post("/match-cv-offre")
async def match_cv_offre(data: MatchingScoreRequest) -> Dict[str, Any]:
    offre = data.offre

    prompt = f"""
    Tu es un assistant RH expert en recrutement. Ta t√¢che est d'analyser le niveau de correspondance entre un CV et une offre d'emploi.

    CV :
    {data.cv}

    Offre d'emploi :
    Description: {offre.description}
    Niveau d'exp√©rience: {offre.niveauExperience}
    Niveau d‚Äô√©tude: {offre.niveauEtude}
    Responsabilit√©s: {offre.responsabilite}
    Exp√©rience demand√©e: {offre.experience}
    Pays: {offre.pays}
    Ville: {offre.ville}

    Analyse les similarit√©s entre :
    - Les exp√©riences du candidat et les responsabilit√©s demand√©es
    - Le niveau d‚Äô√©tude et d‚Äôexp√©rience
    - Les comp√©tences techniques et comportementales

    Donne :
    - Un score de matching entre 0 et 100
    - Une √©valuation br√®ve de l'ad√©quation du profil
    - Les points forts et les √©carts

    R√©ponds uniquement au format JSON :
    {{
        "score": 87,
        "evaluation": "Le profil est globalement adapt√© au poste, avec une bonne exp√©rience en gestion de projet.",
        "points_forts": ["Exp√©rience similaire", "Bonne communication"],
        "ecarts": ["Manque de certification demand√©e"]
    }}
    """

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt.strip()}],
            max_tokens=500
        )
    except Exception as e:
        return {"error": f"Erreur lors de l'appel √† OpenAI: {str(e)}"}

    content = response.choices[0].message.content
    cleaned_content = re.sub(r"^```json\n?|```$", "", content.strip(), flags=re.MULTILINE)

    try:
        return json.loads(cleaned_content)
    except json.JSONDecodeError:
        return {"error": "La r√©ponse de l'IA n'est pas un JSON valide", "raw": content}